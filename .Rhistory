## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
setwd(directory)
all_files <- list.files(pattern = ".csv")
roi <- numeric(0)
for (i in seq_along id) {
crt_csv <- read.csv(all_files[id[i]], head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
setwd(directory)
all_files <- list.files(pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_csv <- read.csv(all_files[id[i]], head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
specdata <- "/Users/weiyuhuang/Documents/Courses/DataScience/2-R/Week-2/specdata"
pollutantmean("specdata", "sulfate", 1:10)
getwd()
all_files <- list.files(path = specdata, pattern = ".csv")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
setwd(directory)
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_csv <- read.csv(all_files[id[i]], head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_csv <- read.csv(all_files[id[i]], head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
setwd("User/weiyuhuang")
setwd("Users/weiyuhuang")
setwd("Users/weiyuhuang/")
getwd()
setwd("/Users/weiyuhuang/")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_file <- paste(path, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
id <- 1
directory <- specdata
pollutant <- sulfate
pollutant <- "sulfate"
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
i <- 1
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_file
read.csv(crt_file, head = TRUE)
i in seq_along(id)
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
all_files <- list.files(path = directory, pattern = ".csv")
roi <- numeric(0)
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
if (pollutant == "sulfate") {
roi <- c(roi, crt_csv[,2])
}
else {
roi <- c(roi, crt_csv[,3])
}
}
mean(x = roi, na.rm = TRUE)
}
pollutantmean(specdata, "sulfate", 1:10)
pollutantmean(specdata, "nitrate", 70:72)
pollutantmean(specdata, "nitrate", 23)
source("complete.R")
?source
?data.frame
length(id)
!is.na(crt_csv[,2]
)
sum(!is.na(crt_csv[,2] & !is.na(crt_csv[,3])))
!is.na(crt_csv[,2]
)
View(crt_csv)
?&
?"&"
sulfate_not_na <- !is.na(crt_csv[,2])
nitrate_not_na <- !is.na(crt_csv[,3])
sum(sulfate_not_na & nitrate_not_na)
?data.frame
id <- 3
all_files <- list.files(path = directory, pattern = ".csv")
nobs <- numeric(length(id))
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
sulfate_not_na <- !is.na(crt_csv[,2])
nitrate_not_na <- !is.na(crt_csv[,3])
nobs(i) <- sum(sulfate_not_na & nitrate_not_na)
}
numeric(length(id))
sum(sulfate_not_na & nitrate_not_na)
nobs[i] <- sum(sulfate_not_na & nitrate_not_na)
data.frame(id, nobs)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
all_files <- list.files(path = directory, pattern = ".csv")
nobs <- numeric(length(id))
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
sulfate_not_na <- !is.na(crt_csv[,2])
nitrate_not_na <- !is.na(crt_csv[,3])
nobs[i] <- sum(sulfate_not_na & nitrate_not_na)
}
data.frame(id, nobs)
}
complete("specdata", 1)
specdata <- "/Users/weiyuhuang/Documents/Courses/DataScience/2-R/Week-2/specdata"
complete(specdata, 1)
debugSource('~/Documents/Courses/DataScience/2-R/Week-2/complete.R')
complete(specdata, 1)
debugSource('~/Documents/Courses/DataScience/2-R/Week-2/complete.R')
debugSource('~/Documents/Courses/DataScience/2-R/Week-2/complete.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
all_files <- list.files(path = directory, pattern = ".csv")
nobs <- numeric(length(id))
for (i in seq_along(id)) {
crt_file <- paste(directory, "/", all_files[id[i]], sep = "")
crt_csv <- read.csv(crt_file, head = TRUE)
sulfate_not_na <- !is.na(crt_csv[,2])
nitrate_not_na <- !is.na(crt_csv[,3])
nobs[i] <- sum(sulfate_not_na & nitrate_not_na)
}
data.frame(id, nobs)
}
crt_csv <- read.csv(crt_file, head = TRUE)
directory <- specdata
id<1
source('~/Documents/Courses/DataScience/2-R/Week-2/complete.R')
library(datasets)
data(iris)
?iris
iris.virginica
data(iris)
iris
View(iris)
split(iris, iris$species)
split(iris, iris$Species)
s_iris <- split(iris, iris$Species)
s_iris
?tapply
tapply(iris, iris$Species, mean, simplify = TRUE)
tapply(iris, iris$Species, mean)
tapply(iris, iris$Species, mean())
s_iris
s_iris$virginica
mean(s_iris$virginica[,1])
library(dataset)
library(datasets)
data(mtcars)
mtcars
?mtcars
?split
split(mtcars$mpg, mtcars$cyl)
?split
?mtcars
mtcars_s <- split(mtcars$hp, mtcars$cyl)
mean(mtcars_s$`4`)
mean(mtcars_s$`8`)
mean(mtcars_s$`8`) - mean(mtcars_s$`4`)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
library(nlme)
xyplot(weight ~ Time | Diet)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality$Month
data = read.csv("activity.csv")
getwd()
setwd("/Users/weiyuhuang/Documents/GitHub/RepData_PeerAssessment1/")
getwd()
data = read.csv("activity.csv")
head(data)
tail(data)
data.stepPerDay = data[, 1:2]
data.stepPerDay = rm.na(data[, 1:2])
is.na(data.stepPerDay)
temp <- data.stepPerDay[!is.na(data.stepPerDay)]
temp <- data.stepPerDay[!is.na(data[, 1]), ]
View(temp)
View(data.stepPerDay)
is.na(data[, 1])
tt <- is.na(data[, 1])
tt[1:100]
tt[287:291]
data.stepPerDay <- data[!is.na(data[, 1]), 1:2]
View(data.stepPerDay)
aggregate(steps ~ date, data.stepPerDay, sum)
temp <- aggregate(steps ~ date, data.stepPerDay, sum)
View(temp)
hist(temp)
hist(temp[, 1])
hist(temp[, 2])
View(data)
sum(is.na(data[, 3]))
data.aveDailyAct <- data[!is.na(data[, 1]),
0
]
data.aveDailyAct <- data[!is.na(data[, 1]), ]
temp = [1 2; 2 1;]
temp = 1
temp = [1 2]
temp = temp <- matrix(c(1 2 3 2 4 3), nrow = 3, ncol = 2)
temp <- matrix(c(1 2 3 2 4 3), nrow = 3, ncol = 2)
temp = matrix(c(1 2 3 2 4 3), nrow = 3, ncol = 2)
temp = matrix(c(1, 2, 3, 2, 4, 3), nrow = 3, ncol = 2)
aggregate(temp[, 1], list(second = temp[, 2]), mean)
temp
temp[3,2] <- 2
tmep
temp
aggregate(temp[, 1], list(second = temp[, 2]), mean)
View(data)
temp <- aggregate(data.aveDailyAct$steps, list(interval = data.aveDailyAct$interval), mean
)
View(temp)
temp <- aggregate(aveStep = data.aveDailyAct$steps, list(interval = data.aveDailyAct$interval), mean)
temp <- aggregate(data.aveDailyAct$steps, list(interval = data.aveDailyAct$interval), mean)
plot(temp$interval, temp$x)
plot(temp$interval, temp$x, main = "Average steps of a given interval", type = "l")
which.max(temp$x)
View(temp)
View(temp)
temp <- is.na(data)
mm <- matrix(c(1, 0, 0, 1, 0, 0), nrows = 3, ncols = 2)
mm <- matrix(c(1, 0, 0, 1, 0, 0), nrow = 3, ncol = 2)
any(mm)
any(mm, 2)
rowSums(mm)
mm
# Remove Nas and subset only STEPS and DATES
data.stepPerDay <- data[!is.na(data[, 1]), 1:2]
# Plot histogram
data.stepPerDay.results <- aggregate(steps ~ date, data.stepPerDay, sum)
hist(data.stepPerDay.results[ ,2], breaks = 10, main = "Total number of steps taken each day", xlab = "total number of steps")
View(data.stepPerDay.results)
which(data.stepPerDay.results[, 1] == data.stepPerDay.results[2, 1])
mm <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
n <- matrix(1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6), nrow = 6, ncol = 3)
n <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6), nrow = 6, ncol = 3)
n <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6), nrow = 6, ncol = 2)
n <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6), nrow = 6, ncol = 2)
mm
n
n = tranpose(n)
n <- matrix(c(1, 2,3,4,5,6,1,2,3,4,5,6), nrow = 6, ncol = 2)
n
mm
mm[2,1] <- NA
mm[3,1] <- NA
colnames(mm) <- c('a', 'b')
mm
n(mm) <- c('b', 'bvalues')
colnames(n) <- c('b', 'bvalues')
n
mm
is.na(mm$a)
mm <- as.dataframe(mm)
mm <- as.data.frame(mm)
n <- as.data.frame(n)
mm
n
is.na(mm$a)
mm[ans]
mm$a[is.na(mm$a)]
NA * FLASE
NA * FALSE
which(is.na(mm$a))
mm_raw <- mm
n_raw <- n
mm$a
mm$a[idx]
idx <- which(is.na(mm$a))
mm$a[idx]
mm$a[2] <- 2
mm
mm <- mm_raw
mm
n
n$bvalues[mm$b[idx]]
idx <- which(is.na(mm$a))
mm$a[idx] <- n$bvalues[mm$b[idx]]
mm
colnames(data.stepPerDay.results)
colnames(data)
View(data.stepPerDay.results)
data.impute <- data
idx <- which(is.na(data.impute$steps)) # idx for NAs
data.impute$steps[idx] <- data.stepPerDay.results$steps[data.impute$data[idx]]
data.stepPerDay.results$steps[data.impute$date[idx]]
data.impute <- data
idx <- which(is.na(data.impute$steps)) # idx for NAs
data.impute$steps[idx] <- data.stepPerDay.results$steps[data.impute$date[idx]]
sum(is.na(data.impute))
sum(is.na(data.stepPerDay.results))
sum(idx)
unique(idx)
length(unique(idx))
data$date[idx]
View(data.stepPerDay.results)
data.impute$steps[is.na(data.impute$steps)] <- mean(data.impute$steps[!is.na(data.impute$steps)])
View(data.impute)
tail(data.impute)
mean(data.impute$steps)
View(data.impute)
# Plot histogram
data.impute.results <- aggregate(steps ~ date, data.impute, sum)
hist(data.impute.results$steps, breaks = 10, main = "Total number of steps taken each day", xlab = "total number of steps")
# Calculate and report mean and median values
data.impute.mean <- mean(data.impute.results$steps)
data.impute.median <- median(data.impute.results$steps)
View(data.impute.results)
View(data.stepPerDay.results)
View(data.impute)
data.day <- weekdays(as.Date(data$date))
View(data)
data$day <- weekdays(as.Date(data$date))
View(data)
temp <- weekdays(as.Date(data$date)) %in% c('Saturday', 'Sunday')
View(data)
data$day[1500]
temp[1500]
a = c(TRUE, TRUE, FALSE)
a
factor(a, labels = c('Weekday', 'Weekend'))
a
temp <- weekdays(as.Date(data$date)) %in% c('Saturday', 'Sunday')
data$day <- factor(temp, labels = c('weekday', 'weekend'))
View(data)
data$day[1500]
data.day <- data[!is.na(data[, 1]), ]
temp <- aggregate(steps ~ intervals | day, data.day, mean)
colnames(data.day)
temp <- aggregate(steps ~ interval | day, data.day, mean)
temp <- aggregate(steps ~ interval + day, data.day, mean)
View(temp)
library("lattice")
colnames(temp)
xyplot(steps ~ interval | day, data = temp, type = "l")
xyplot(steps ~ interval | day, data = temp, type = "l", lty(1,3))
xyplot(steps ~ interval | day, data = temp, type = "l", lty(1,3, 1))
xyplot(steps ~ interval | day, data = temp, type = "l", lty = c(1,3, 1))
xyplot(steps ~ interval | day, data = temp, type = "l")
xyplot(steps ~ interval | day, data = temp, type = "l", layout = c(1,3))
xyplot(steps ~ interval | day, data = temp, type = "l", layout = c(1,2))
